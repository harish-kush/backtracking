class Solution {
public:
    vector<vector<char>>grid;
    vector<vector<string>>result;
bool canPlaceQueen(int row, int col, int n) {
    // col check
    for(int i = row-1;i>=0;i--){
        if(grid[i][col]=='Q') return false;
    }
    // diagonal left check
    for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
        if(grid[i][j] == 'Q') return false;
    }
    // diagonal right check
    for(int i=row-1,j=col+1;i>=0 && j<n ; i--,j++){
        if(grid[i][j] == 'Q') return false;
    }

    return true;  // not found
}
    void f(int row, int n){
        vector<string>ans;
    if(row==n) {
        for(int i=0;i<n;i++){
            string s = "";
            for(int j = 0 ;j<n;j++){
                s+=grid[i][j];
            }
             ans.push_back(s);
        }
        result.push_back(ans);
       
    }
    for(int col = 0;col<n;col++){
        if(canPlaceQueen(row,col,n)) {
            grid[row][col] = 'Q'; // change the state
            f(row+1,n);
            grid[row][col] = '.'; // revert back after f calling
         }
      }
   }
    vector<vector<string>> solveNQueens(int n) {
        grid.resize(n,vector<char>(n,'.'));
        f(0,n);
        return result;
    }
};
